//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.FeatureSpl
{
	/// <summary>
	/// DomainRelationship ExampleModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FeatureSpl.ExampleModelHasElements.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FeatureSpl.ExampleModelHasElements.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FeatureSpl.FeatureSplDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("09a12265-6df0-4262-8ef5-6bd937c0931f")]
	public partial class ExampleModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09a12265, 0x6df0, 0x4262, 0x8e, 0xf5, 0x6b, 0xd9, 0x37, 0xc0, 0x93, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasElements link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public ExampleModelHasElements(ExampleModel source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasElements.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0x82898180, 0x5402, 0x4533, 0xb4, 0xaf, 0xcc, 0xac, 0xed, 0x92, 0x6f, 0x60);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FeatureSpl.ExampleModelHasElements/ExampleModel.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FeatureSpl.ExampleModelHasElements/ExampleModel.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.FeatureSpl.ExampleModelHasElements/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("82898180-5402-4533-b4af-ccaced926f60")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a FeatureElement
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(FeatureElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(FeatureElement element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newExampleModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x90cca33c, 0x9f8b, 0x4058, 0x95, 0x0f, 0x72, 0x36, 0x2a, 0x3c, 0xc8, 0x97);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FeatureSpl.ExampleModelHasElements/Element.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FeatureSpl.ExampleModelHasElements/Element.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.FeatureSpl.ExampleModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("90cca33c-9f8b-4058-950f-72362a3cc897")]
		public virtual FeatureElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a ExampleModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetElements(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasElements links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.ExampleModelHasElements> GetLinksToElements ( global::Company.FeatureSpl.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.ExampleModelHasElements>(exampleModelInstance, global::Company.FeatureSpl.ExampleModelHasElements.ExampleModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ExampleModelHasElements link to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FeatureSpl.ExampleModelHasElements GetLinkToExampleModel (global::Company.FeatureSpl.FeatureElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FeatureSpl.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.ExampleModelHasElements>(elementInstance, global::Company.FeatureSpl.ExampleModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasElements instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasElements links between a given ExampleModel and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.ExampleModelHasElements> GetLinks( global::Company.FeatureSpl.ExampleModel source, global::Company.FeatureSpl.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.FeatureSpl.ExampleModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.FeatureSpl.ExampleModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.FeatureSpl.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.ExampleModelHasElements>(source, global::Company.FeatureSpl.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.FeatureSpl.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasElements link between a given ExampleModeland a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FeatureSpl.ExampleModelHasElements GetLink( global::Company.FeatureSpl.ExampleModel source, global::Company.FeatureSpl.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.FeatureSpl.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.ExampleModelHasElements>(source, global::Company.FeatureSpl.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.FeatureSpl.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FeatureSpl
{
	/// <summary>
	/// DomainRelationship FeatureElementReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FeatureSpl.FeatureElementReferencesTargets.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FeatureSpl.FeatureElementReferencesTargets.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FeatureSpl.FeatureSplDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("37425e3c-839f-442a-a229-dd5b79574082")]
	public partial class FeatureElementReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37425e3c, 0x839f, 0x442a, 0xa2, 0x29, 0xdd, 0x5b, 0x79, 0x57, 0x40, 0x82);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementReferencesTargets link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureElementReferencesTargets(FeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x7707123b, 0x633e, 0x4ab2, 0x9c, 0x56, 0xef, 0xae, 0x0a, 0x14, 0x9a, 0x7f);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.FeatureSpl.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FeatureSpl.FeatureElementReferencesTargets/Source.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FeatureSpl.FeatureElementReferencesTargets/Source.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.FeatureSpl.FeatureElementReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7707123b-633e-4ab2-9c56-efae0a149a7f")]
		public virtual FeatureElement Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a FeatureElement
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetSources(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x53940d0d, 0x1505, 0x44fe, 0x9f, 0xf3, 0x59, 0x8d, 0xf9, 0xb3, 0xe4, 0xa1);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.FeatureSpl.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FeatureSpl.FeatureElementReferencesTargets/Target.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FeatureSpl.FeatureElementReferencesTargets/Target.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.FeatureSpl.FeatureElementReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("53940d0d-1505-44fe-9ff3-598df9b3e4a1")]
		public virtual FeatureElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a FeatureElement
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetTargets(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of FeatureElementReferencesTargets links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.FeatureElementReferencesTargets> GetLinksToTargets ( global::Company.FeatureSpl.FeatureElement sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.FeatureElementReferencesTargets>(sourceInstance, global::Company.FeatureSpl.FeatureElementReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of FeatureElementReferencesTargets links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.FeatureElementReferencesTargets> GetLinksToSources ( global::Company.FeatureSpl.FeatureElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.FeatureElementReferencesTargets>(targetInstance, global::Company.FeatureSpl.FeatureElementReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region FeatureElementReferencesTargets instance accessors
		
		/// <summary>
		/// Get any FeatureElementReferencesTargets links between a given FeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.FeatureElementReferencesTargets> GetLinks( global::Company.FeatureSpl.FeatureElement source, global::Company.FeatureSpl.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.FeatureSpl.FeatureElementReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.FeatureSpl.FeatureElementReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.FeatureSpl.FeatureElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.FeatureElementReferencesTargets>(source, global::Company.FeatureSpl.FeatureElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.FeatureSpl.FeatureElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementReferencesTargets link between a given FeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FeatureSpl.FeatureElementReferencesTargets GetLink( global::Company.FeatureSpl.FeatureElement source, global::Company.FeatureSpl.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.FeatureSpl.FeatureElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.FeatureElementReferencesTargets>(source, global::Company.FeatureSpl.FeatureElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.FeatureSpl.FeatureElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FeatureSpl
{
	/// <summary>
	/// DomainRelationship RootFeatureElementReferencesFeatureElements
	/// Description for Company.FeatureSpl.RootFeatureElementReferencesFeatureElements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FeatureSpl.FeatureSplDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7dff9289-8d36-4ccc-a847-cc66d76f6154")]
	public partial class RootFeatureElementReferencesFeatureElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RootFeatureElementReferencesFeatureElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7dff9289, 0x8d36, 0x4ccc, 0xa8, 0x47, 0xcc, 0x66, 0xd7, 0x6f, 0x61, 0x54);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RootFeatureElementReferencesFeatureElements link in the same Partition as the given RootFeatureElement
		/// </summary>
		/// <param name="source">RootFeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public RootFeatureElementReferencesFeatureElements(RootFeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RootFeatureElementReferencesFeatureElements.RootFeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(RootFeatureElementReferencesFeatureElements.FeatureElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RootFeatureElementReferencesFeatureElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RootFeatureElementReferencesFeatureElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RootFeatureElementReferencesFeatureElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RootFeatureElementReferencesFeatureElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region RootFeatureElement domain role code
		
		/// <summary>
		/// RootFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid RootFeatureElementDomainRoleId = new global::System.Guid(0x4d1b5024, 0x7ef9, 0x4275, 0x8c, 0xe9, 0x22, 0x29, 0x4e, 0x08, 0x4b, 0xab);
		
		/// <summary>
		/// DomainRole RootFeatureElement
		/// Description for
		/// Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.RootFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FeatureSpl.RootFeatureElementReferencesFeatureElements/RootFeatureElement.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FeatureSpl.RootFeatureElementReferencesFeatureElements/RootFeatureElement.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FeatureElements", PropertyDisplayNameKey="Company.FeatureSpl.RootFeatureElementReferencesFeatureElements/RootFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4d1b5024-7ef9-4275-8ce9-22294e084bab")]
		public virtual RootFeatureElement RootFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (RootFeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, RootFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RootFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RootFeatureElements of a FeatureElement
		/// <summary>
		/// Gets a list of RootFeatureElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<RootFeatureElement> GetRootFeatureElements(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<RootFeatureElement>, RootFeatureElement>(element, FeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElement domain role code
		
		/// <summary>
		/// FeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureElementDomainRoleId = new global::System.Guid(0x8a8ebe58, 0x07e6, 0x49d7, 0xad, 0x99, 0xc2, 0x3f, 0x06, 0x73, 0x0a, 0xdf);
		
		/// <summary>
		/// DomainRole FeatureElement
		/// Description for
		/// Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.FeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FeatureSpl.RootFeatureElementReferencesFeatureElements/FeatureElement.DisplayName", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FeatureSpl.RootFeatureElementReferencesFeatureElements/FeatureElement.Description", typeof(global::Company.FeatureSpl.FeatureSplDomainModel), "Company.FeatureSpl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "RootFeatureElements", PropertyDisplayNameKey="Company.FeatureSpl.RootFeatureElementReferencesFeatureElements/FeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a8ebe58-07e6-49d7-ad99-c23f06730adf")]
		public virtual FeatureElement FeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureElements of a RootFeatureElement
		/// <summary>
		/// Gets a list of FeatureElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetFeatureElements(RootFeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, RootFeatureElementDomainRoleId);
		}
		#endregion
		#region RootFeatureElement link accessor
		/// <summary>
		/// Get the list of RootFeatureElementReferencesFeatureElements links to a RootFeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements> GetLinksToFeatureElements ( global::Company.FeatureSpl.RootFeatureElement rootFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements>(rootFeatureElementInstance, global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.RootFeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElement link accessor
		/// <summary>
		/// Get the list of RootFeatureElementReferencesFeatureElements links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements> GetLinksToRootFeatureElements ( global::Company.FeatureSpl.FeatureElement featureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements>(featureElementInstance, global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.FeatureElementDomainRoleId);
		}
		#endregion
		#region RootFeatureElementReferencesFeatureElements instance accessors
		
		/// <summary>
		/// Get any RootFeatureElementReferencesFeatureElements links between a given RootFeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements> GetLinks( global::Company.FeatureSpl.RootFeatureElement source, global::Company.FeatureSpl.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements> outLinks = new global::System.Collections.Generic.List<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements>();
			global::System.Collections.Generic.IList<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements>(source, global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.RootFeatureElementDomainRoleId);
			foreach ( global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements link in links )
			{
				if ( target.Equals(link.FeatureElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RootFeatureElementReferencesFeatureElements link between a given RootFeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements GetLink( global::Company.FeatureSpl.RootFeatureElement source, global::Company.FeatureSpl.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements>(source, global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements.RootFeatureElementDomainRoleId);
			foreach ( global::Company.FeatureSpl.RootFeatureElementReferencesFeatureElements link in links )
			{
				if ( target.Equals(link.FeatureElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
