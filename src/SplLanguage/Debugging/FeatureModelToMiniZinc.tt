<#@ template language="C#" debug="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" linePragmas="false" culture="en-US" #>
<#@ output extension=".mzn" encoding="us-ascii" #>
<#@ SplLanguage processor="SplLanguageDirectiveProcessor" requires="fileName='Sample.SplLanguage'" provides="FeatureModel=FeatureModel"#>
%MiniZinc Model for: <#= this.FeatureModel.Name #>
<#
foreach(FeatureElement feature in this.FeatureModel.Elements)
{
    foreach(FeatureElement featureExcluded in feature.TargetExcludeFeatureElements)
    {
#>
par bool: <#= feature.Name + "Included = " + feature.Included.ToString().ToLower() #>;
<#
    }
}
#>

<#
foreach(FeatureElement feature in this.FeatureModel.Elements)
{
    foreach(FeatureElement featureExcluded in feature.TargetExcludeFeatureElements)
    {
#>
var bool: <#= featureExcluded.Name + "Included" #>;
<#
    }
}
#>

<#
foreach(FeatureElement feature in this.FeatureModel.Elements)
{
    foreach(FeatureElement featureExcluded in feature.TargetExcludeFeatureElements)
    {
#>
constraint <#= feature.Name + "Included != " + featureExcluded.Name + "Included" #>;
<#
    }
}
#>

solve satisfy;

output ["<# foreach(FeatureElement feature in this.FeatureModel.Elements){ if(feature.Type==Company.SplLanguage.FeatureType.Concrete){#><#= feature.Name + "Included" #>=\(<#=feature.Name + "Included"#>)\n<#}}#>"];