//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureModelHasElements.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureModelHasElements.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("81b4eb75-6e8d-45c2-8a83-5d915131d8ae")]
	public partial class FeatureModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x81b4eb75, 0x6e8d, 0x45c2, 0x8a, 0x83, 0x5d, 0x91, 0x51, 0x31, 0xd8, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureModelHasElements link in the same Partition as the given FeatureModel
		/// </summary>
		/// <param name="source">FeatureModel to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureModelHasElements(FeatureModel source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureModelHasElements.FeatureModelDomainRoleId, source), new DslModeling::RoleAssignment(FeatureModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FeatureModel domain role code
		
		/// <summary>
		/// FeatureModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureModelDomainRoleId = new global::System.Guid(0xcbc98b1d, 0x6bd2, 0x415a, 0x9a, 0xba, 0x0b, 0xad, 0x03, 0x55, 0x5f, 0x41);
		
		/// <summary>
		/// DomainRole FeatureModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureModelHasElements/FeatureModel.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureModelHasElements/FeatureModel.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.SplLanguage.FeatureModelHasElements/FeatureModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cbc98b1d-6bd2-415a-9aba-0bad03555f41")]
		public virtual FeatureModel FeatureModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureModel of a FeatureElement
		/// <summary>
		/// Gets FeatureModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FeatureModel GetFeatureModel(FeatureElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as FeatureModel;
		}
		
		/// <summary>
		/// Sets FeatureModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFeatureModel(FeatureElement element, FeatureModel newFeatureModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newFeatureModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xec1844d9, 0x3726, 0x4ffb, 0xa0, 0x9b, 0xd6, 0x3b, 0x78, 0x03, 0xf9, 0xf5);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureModelHasElements/Element.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureModelHasElements/Element.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FeatureModel", PropertyDisplayNameKey="Company.SplLanguage.FeatureModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ec1844d9-3726-4ffb-a09b-d63b7803f9f5")]
		public virtual FeatureElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a FeatureModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetElements(FeatureModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, FeatureModelDomainRoleId);
		}
		#endregion
		#region FeatureModel link accessor
		/// <summary>
		/// Get the list of FeatureModelHasElements links to a FeatureModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureModelHasElements> GetLinksToElements ( global::Company.SplLanguage.FeatureModel featureModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(featureModelInstance, global::Company.SplLanguage.FeatureModelHasElements.FeatureModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the FeatureModelHasElements link to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureModelHasElements GetLinkToFeatureModel (global::Company.SplLanguage.FeatureElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(elementInstance, global::Company.SplLanguage.FeatureModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FeatureModelHasElements instance accessors
		
		/// <summary>
		/// Get any FeatureModelHasElements links between a given FeatureModel and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureModelHasElements> GetLinks( global::Company.SplLanguage.FeatureModel source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(source, global::Company.SplLanguage.FeatureModelHasElements.FeatureModelDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureModelHasElements link between a given FeatureModeland a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureModelHasElements GetLink( global::Company.SplLanguage.FeatureModel source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(source, global::Company.SplLanguage.FeatureModelHasElements.FeatureModelDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementOptionalReferencesFeatureElement
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("20b619db-33d1-485b-9cac-5c3d29f9c491")]
	public partial class FeatureElementOptionalReferencesFeatureElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementOptionalReferencesFeatureElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x20b619db, 0x33d1, 0x485b, 0x9c, 0xac, 0x5c, 0x3d, 0x29, 0xf9, 0xc4, 0x91);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementOptionalReferencesFeatureElement link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureElementOptionalReferencesFeatureElement(FeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementOptionalReferencesFeatureElement.SourceOptionalFeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementOptionalReferencesFeatureElement.TargetOptionalFeatureElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementOptionalReferencesFeatureElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementOptionalReferencesFeatureElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementOptionalReferencesFeatureElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementOptionalReferencesFeatureElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceOptionalFeatureElement domain role code
		
		/// <summary>
		/// SourceOptionalFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceOptionalFeatureElementDomainRoleId = new global::System.Guid(0xc8080e7a, 0x3c3a, 0x42e5, 0x80, 0x2b, 0x4a, 0x0f, 0x37, 0xd1, 0xd9, 0xc5);
		
		/// <summary>
		/// DomainRole SourceOptionalFeatureElement
		/// Description for Company.SplLanguage.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement/SourceOptionalFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement/SourceOptionalFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourceOptionalFeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement/SourceOptionalFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8080e7a-3c3a-42e5-802b-4a0f37d1d9c5")]
		public virtual FeatureElement SourceOptionalFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceOptionalFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceOptionalFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetOptionalFeatureElement of a FeatureElement
		/// <summary>
		/// Gets a list of TargetOptionalFeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetTargetOptionalFeatureElement(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, TargetOptionalFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetOptionalFeatureElement domain role code
		
		/// <summary>
		/// TargetOptionalFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetOptionalFeatureElementDomainRoleId = new global::System.Guid(0x81e849b8, 0xdbac, 0x47e0, 0x90, 0x46, 0xee, 0x0e, 0x3e, 0xff, 0xd5, 0x89);
		
		/// <summary>
		/// DomainRole TargetOptionalFeatureElement
		/// Description for Company.SplLanguage.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement/TargetOptionalFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement/TargetOptionalFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TargetOptionalFeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement/TargetOptionalFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("81e849b8-dbac-47e0-9046-ee0e3effd589")]
		public virtual FeatureElement TargetOptionalFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetOptionalFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetOptionalFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceOptionalFeatureElement of a FeatureElement
		/// <summary>
		/// Gets a list of SourceOptionalFeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetSourceOptionalFeatureElement(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, SourceOptionalFeatureElementDomainRoleId);
		}
		#endregion
		#region SourceOptionalFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementOptionalReferencesFeatureElement links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement> GetLinksToSourceOptionalFeatureElement ( global::Company.SplLanguage.FeatureElement sourceOptionalFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement>(sourceOptionalFeatureElementInstance, global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement.SourceOptionalFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetOptionalFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementOptionalReferencesFeatureElement links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement> GetLinksToTargetOptionalFeatureElement ( global::Company.SplLanguage.FeatureElement targetOptionalFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement>(targetOptionalFeatureElementInstance, global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement.TargetOptionalFeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElementOptionalReferencesFeatureElement instance accessors
		
		/// <summary>
		/// Get any FeatureElementOptionalReferencesFeatureElement links between a given FeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement>(source, global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement.SourceOptionalFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement link in links )
			{
				if ( target.Equals(link.TargetOptionalFeatureElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementOptionalReferencesFeatureElement link between a given FeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement>(source, global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement.SourceOptionalFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementOptionalReferencesFeatureElement link in links )
			{
				if ( target.Equals(link.TargetOptionalFeatureElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementMandatoryReferencesFeatureElement
	/// Description for
	/// Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9d57ccb1-6b0e-4a45-9dc2-9f117a026a92")]
	public partial class FeatureElementMandatoryReferencesFeatureElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementMandatoryReferencesFeatureElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d57ccb1, 0x6b0e, 0x4a45, 0x9d, 0xc2, 0x9f, 0x11, 0x7a, 0x02, 0x6a, 0x92);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementMandatoryReferencesFeatureElement link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureElementMandatoryReferencesFeatureElement(FeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementMandatoryReferencesFeatureElement.SourceMandatoryFeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementMandatoryReferencesFeatureElement.TargetMandatoryFeatureElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementMandatoryReferencesFeatureElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementMandatoryReferencesFeatureElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementMandatoryReferencesFeatureElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementMandatoryReferencesFeatureElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceMandatoryFeatureElement domain role code
		
		/// <summary>
		/// SourceMandatoryFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceMandatoryFeatureElementDomainRoleId = new global::System.Guid(0xba943ae6, 0x8ff8, 0x4a6d, 0xb9, 0xb6, 0x08, 0x49, 0xc3, 0x75, 0x14, 0x4b);
		
		/// <summary>
		/// DomainRole SourceMandatoryFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.SourceMandatoryFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement/SourceMandatoryFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement/SourceMandatoryFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourceMandatoryFeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement/SourceMandatoryFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba943ae6-8ff8-4a6d-b9b6-0849c375144b")]
		public virtual FeatureElement SourceMandatoryFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceMandatoryFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceMandatoryFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetMandatoryFeatureElement of a FeatureElement
		/// <summary>
		/// Gets a list of TargetMandatoryFeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetTargetMandatoryFeatureElement(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, TargetMandatoryFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetMandatoryFeatureElement domain role code
		
		/// <summary>
		/// TargetMandatoryFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetMandatoryFeatureElementDomainRoleId = new global::System.Guid(0xda45bd39, 0xcb08, 0x420f, 0x96, 0x37, 0x59, 0x08, 0xe9, 0xb2, 0xf4, 0x9f);
		
		/// <summary>
		/// DomainRole TargetMandatoryFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.TargetMandatoryFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement/TargetMandatoryFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement/TargetMandatoryFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TargetMandatoryFeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement/TargetMandatoryFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("da45bd39-cb08-420f-9637-5908e9b2f49f")]
		public virtual FeatureElement TargetMandatoryFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetMandatoryFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetMandatoryFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceMandatoryFeatureElement of a FeatureElement
		/// <summary>
		/// Gets a list of SourceMandatoryFeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetSourceMandatoryFeatureElement(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, SourceMandatoryFeatureElementDomainRoleId);
		}
		#endregion
		#region SourceMandatoryFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementMandatoryReferencesFeatureElement links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement> GetLinksToSourceMandatoryFeatureElement ( global::Company.SplLanguage.FeatureElement sourceMandatoryFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement>(sourceMandatoryFeatureElementInstance, global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.SourceMandatoryFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetMandatoryFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementMandatoryReferencesFeatureElement links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement> GetLinksToTargetMandatoryFeatureElement ( global::Company.SplLanguage.FeatureElement targetMandatoryFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement>(targetMandatoryFeatureElementInstance, global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.TargetMandatoryFeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElementMandatoryReferencesFeatureElement instance accessors
		
		/// <summary>
		/// Get any FeatureElementMandatoryReferencesFeatureElement links between a given FeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement>(source, global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.SourceMandatoryFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement link in links )
			{
				if ( target.Equals(link.TargetMandatoryFeatureElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementMandatoryReferencesFeatureElement link between a given FeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement>(source, global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement.SourceMandatoryFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementMandatoryReferencesFeatureElement link in links )
			{
				if ( target.Equals(link.TargetMandatoryFeatureElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementRequiresReferencesFeatureElements
	/// Description for
	/// Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6c077d53-2bcb-4bdd-b992-bbadc08f114c")]
	public partial class FeatureElementRequiresReferencesFeatureElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementRequiresReferencesFeatureElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6c077d53, 0x2bcb, 0x4bdd, 0xb9, 0x92, 0xbb, 0xad, 0xc0, 0x8f, 0x11, 0x4c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementRequiresReferencesFeatureElements link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureElementRequiresReferencesFeatureElements(FeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementRequiresReferencesFeatureElements.SourceRequiresFeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementRequiresReferencesFeatureElements.TargetRequiresFeatureElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementRequiresReferencesFeatureElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementRequiresReferencesFeatureElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementRequiresReferencesFeatureElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementRequiresReferencesFeatureElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceRequiresFeatureElement domain role code
		
		/// <summary>
		/// SourceRequiresFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceRequiresFeatureElementDomainRoleId = new global::System.Guid(0x0eb1a27f, 0x935e, 0x40b6, 0xb1, 0x2f, 0x37, 0x42, 0xcc, 0x78, 0x16, 0xf8);
		
		/// <summary>
		/// DomainRole SourceRequiresFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.SourceRequiresFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements/SourceRequiresFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements/SourceRequiresFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SourceRequiresFeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements/SourceRequiresFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0eb1a27f-935e-40b6-b12f-3742cc7816f8")]
		public virtual FeatureElement SourceRequiresFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceRequiresFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceRequiresFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetRequiresFeatureElement of a FeatureElement
		/// <summary>
		/// Gets a list of TargetRequiresFeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetTargetRequiresFeatureElement(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, TargetRequiresFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetRequiresFeatureElement domain role code
		
		/// <summary>
		/// TargetRequiresFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetRequiresFeatureElementDomainRoleId = new global::System.Guid(0xcaf96b38, 0xcda1, 0x4044, 0x93, 0x28, 0x16, 0x73, 0xd2, 0xdb, 0x05, 0x84);
		
		/// <summary>
		/// DomainRole TargetRequiresFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.TargetRequiresFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements/TargetRequiresFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements/TargetRequiresFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TargetRequiresFeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements/TargetRequiresFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("caf96b38-cda1-4044-9328-1673d2db0584")]
		public virtual FeatureElement TargetRequiresFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetRequiresFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetRequiresFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceRequiresFeatureElement of a FeatureElement
		/// <summary>
		/// Gets a list of SourceRequiresFeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetSourceRequiresFeatureElement(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, SourceRequiresFeatureElementDomainRoleId);
		}
		#endregion
		#region SourceRequiresFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementRequiresReferencesFeatureElements links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements> GetLinksToSourceRequiresFeatureElement ( global::Company.SplLanguage.FeatureElement sourceRequiresFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements>(sourceRequiresFeatureElementInstance, global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.SourceRequiresFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetRequiresFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementRequiresReferencesFeatureElements links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements> GetLinksToTargetRequiresFeatureElement ( global::Company.SplLanguage.FeatureElement targetRequiresFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements>(targetRequiresFeatureElementInstance, global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.TargetRequiresFeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElementRequiresReferencesFeatureElements instance accessors
		
		/// <summary>
		/// Get any FeatureElementRequiresReferencesFeatureElements links between a given FeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements>(source, global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.SourceRequiresFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements link in links )
			{
				if ( target.Equals(link.TargetRequiresFeatureElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementRequiresReferencesFeatureElements link between a given FeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements>(source, global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements.SourceRequiresFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementRequiresReferencesFeatureElements link in links )
			{
				if ( target.Equals(link.TargetRequiresFeatureElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementExcludesReferenceFeatureElement
	/// Description for
	/// Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("32831621-5ce2-4339-a437-2efdacb820cd")]
	public partial class FeatureElementExcludesReferenceFeatureElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementExcludesReferenceFeatureElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32831621, 0x5ce2, 0x4339, 0xa4, 0x37, 0x2e, 0xfd, 0xac, 0xb8, 0x20, 0xcd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementExcludesReferenceFeatureElement link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureElementExcludesReferenceFeatureElement(FeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementExcludesReferenceFeatureElement.SourceExcludeFeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementExcludesReferenceFeatureElement.TargetExcludeFeatureElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementExcludesReferenceFeatureElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementExcludesReferenceFeatureElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementExcludesReferenceFeatureElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementExcludesReferenceFeatureElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceExcludeFeatureElement domain role code
		
		/// <summary>
		/// SourceExcludeFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceExcludeFeatureElementDomainRoleId = new global::System.Guid(0xbfda71cd, 0x6af0, 0x4add, 0xac, 0x93, 0x7d, 0x4a, 0xfd, 0x44, 0xf9, 0x43);
		
		/// <summary>
		/// DomainRole SourceExcludeFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.SourceExcludeFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement/SourceExcludeFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement/SourceExcludeFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetExcludeFeatureElements", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement/SourceExcludeFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bfda71cd-6af0-4add-ac93-7d4afd44f943")]
		public virtual FeatureElement SourceExcludeFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceExcludeFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceExcludeFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceExcludeFeatureElements of a FeatureElement
		/// <summary>
		/// Gets a list of SourceExcludeFeatureElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetSourceExcludeFeatureElements(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, TargetExcludeFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetExcludeFeatureElement domain role code
		
		/// <summary>
		/// TargetExcludeFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetExcludeFeatureElementDomainRoleId = new global::System.Guid(0x00ed89f8, 0x1810, 0x4700, 0x87, 0x3b, 0x11, 0x5a, 0x3e, 0x71, 0x6a, 0x80);
		
		/// <summary>
		/// DomainRole TargetExcludeFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.TargetExcludeFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement/TargetExcludeFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement/TargetExcludeFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceExcludeFeatureElements", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement/TargetExcludeFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("00ed89f8-1810-4700-873b-115a3e716a80")]
		public virtual FeatureElement TargetExcludeFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetExcludeFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetExcludeFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetExcludeFeatureElements of a FeatureElement
		/// <summary>
		/// Gets a list of TargetExcludeFeatureElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetTargetExcludeFeatureElements(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, SourceExcludeFeatureElementDomainRoleId);
		}
		#endregion
		#region SourceExcludeFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementExcludesReferenceFeatureElement links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement> GetLinksToTargetExcludeFeatureElements ( global::Company.SplLanguage.FeatureElement sourceExcludeFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement>(sourceExcludeFeatureElementInstance, global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.SourceExcludeFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetExcludeFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementExcludesReferenceFeatureElement links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement> GetLinksToSourceExcludeFeatureElements ( global::Company.SplLanguage.FeatureElement targetExcludeFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement>(targetExcludeFeatureElementInstance, global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.TargetExcludeFeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElementExcludesReferenceFeatureElement instance accessors
		
		/// <summary>
		/// Get any FeatureElementExcludesReferenceFeatureElement links between a given FeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement>(source, global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.SourceExcludeFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement link in links )
			{
				if ( target.Equals(link.TargetExcludeFeatureElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementExcludesReferenceFeatureElement link between a given FeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement>(source, global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement.SourceExcludeFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementExcludesReferenceFeatureElement link in links )
			{
				if ( target.Equals(link.TargetExcludeFeatureElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementHasFeatureAttributed
	/// Description for Company.SplLanguage.FeatureElementHasFeatureAttributed
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementHasFeatureAttributed.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementHasFeatureAttributed.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f1bb9d84-fdf2-4096-9e17-67993136d22b")]
	public partial class FeatureElementHasFeatureAttributed : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementHasFeatureAttributed domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1bb9d84, 0xfdf2, 0x4096, 0x9e, 0x17, 0x67, 0x99, 0x31, 0x36, 0xd2, 0x2b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementHasFeatureAttributed link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureAttribute to use as the target of the relationship.</param>
		public FeatureElementHasFeatureAttributed(FeatureElement source, FeatureAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementHasFeatureAttributed.FeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementHasFeatureAttributed.FeatureAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementHasFeatureAttributed(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementHasFeatureAttributed(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementHasFeatureAttributed(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementHasFeatureAttributed(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FeatureElement domain role code
		
		/// <summary>
		/// FeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureElementDomainRoleId = new global::System.Guid(0xd48ccfdc, 0xf971, 0x4980, 0xbd, 0x80, 0xb9, 0x1c, 0x24, 0x08, 0x4f, 0x5b);
		
		/// <summary>
		/// DomainRole FeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementHasFeatureAttributed.FeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementHasFeatureAttributed/FeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementHasFeatureAttributed/FeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FeatureAttributed", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementHasFeatureAttributed/FeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d48ccfdc-f971-4980-bd80-b91c24084f5b")]
		public virtual FeatureElement FeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureElement of a FeatureAttribute
		/// <summary>
		/// Gets FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FeatureElement GetFeatureElement(FeatureAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FeatureAttributeDomainRoleId) as FeatureElement;
		}
		
		/// <summary>
		/// Sets FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFeatureElement(FeatureAttribute element, FeatureElement newFeatureElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FeatureAttributeDomainRoleId, newFeatureElement);
		}
		#endregion
		#region FeatureAttribute domain role code
		
		/// <summary>
		/// FeatureAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureAttributeDomainRoleId = new global::System.Guid(0x72333ea4, 0xb4fa, 0x4db5, 0xa7, 0xcf, 0x60, 0x81, 0xa6, 0x7a, 0xb2, 0x78);
		
		/// <summary>
		/// DomainRole FeatureAttribute
		/// Description for
		/// Company.SplLanguage.FeatureElementHasFeatureAttributed.FeatureAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementHasFeatureAttributed/FeatureAttribute.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementHasFeatureAttributed/FeatureAttribute.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementHasFeatureAttributed/FeatureAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("72333ea4-b4fa-4db5-a7cf-6081a67ab278")]
		public virtual FeatureAttribute FeatureAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureAttributed of a FeatureElement
		/// <summary>
		/// Gets a list of FeatureAttributed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureAttribute> GetFeatureAttributed(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureAttribute>, FeatureAttribute>(element, FeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementHasFeatureAttributed links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementHasFeatureAttributed> GetLinksToFeatureAttributed ( global::Company.SplLanguage.FeatureElement featureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureAttributed>(featureElementInstance, global::Company.SplLanguage.FeatureElementHasFeatureAttributed.FeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureAttribute link accessor
		/// <summary>
		/// Get the FeatureElementHasFeatureAttributed link to a FeatureAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementHasFeatureAttributed GetLinkToFeatureElement (global::Company.SplLanguage.FeatureAttribute featureAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementHasFeatureAttributed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureAttributed>(featureAttributeInstance, global::Company.SplLanguage.FeatureElementHasFeatureAttributed.FeatureAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FeatureAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FeatureElementHasFeatureAttributed instance accessors
		
		/// <summary>
		/// Get any FeatureElementHasFeatureAttributed links between a given FeatureElement and a FeatureAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementHasFeatureAttributed> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureAttribute target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementHasFeatureAttributed> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementHasFeatureAttributed>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementHasFeatureAttributed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureAttributed>(source, global::Company.SplLanguage.FeatureElementHasFeatureAttributed.FeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementHasFeatureAttributed link in links )
			{
				if ( target.Equals(link.FeatureAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementHasFeatureAttributed link between a given FeatureElementand a FeatureAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementHasFeatureAttributed GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureAttribute target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementHasFeatureAttributed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureAttributed>(source, global::Company.SplLanguage.FeatureElementHasFeatureAttributed.FeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementHasFeatureAttributed link in links )
			{
				if ( target.Equals(link.FeatureAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementHasFeatureConstraints
	/// Description for Company.SplLanguage.FeatureElementHasFeatureConstraints
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementHasFeatureConstraints.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementHasFeatureConstraints.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ff7d02ac-1334-40a8-963c-09d62df722fb")]
	public partial class FeatureElementHasFeatureConstraints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementHasFeatureConstraints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff7d02ac, 0x1334, 0x40a8, 0x96, 0x3c, 0x09, 0xd6, 0x2d, 0xf7, 0x22, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementHasFeatureConstraints link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureConstraint to use as the target of the relationship.</param>
		public FeatureElementHasFeatureConstraints(FeatureElement source, FeatureConstraint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementHasFeatureConstraints.FeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementHasFeatureConstraints.FeatureConstraintDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementHasFeatureConstraints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementHasFeatureConstraints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementHasFeatureConstraints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementHasFeatureConstraints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FeatureElement domain role code
		
		/// <summary>
		/// FeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureElementDomainRoleId = new global::System.Guid(0xa3a82740, 0x9d40, 0x42bc, 0xaf, 0x4e, 0x6e, 0x23, 0x58, 0xbe, 0x49, 0x2a);
		
		/// <summary>
		/// DomainRole FeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementHasFeatureConstraints.FeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementHasFeatureConstraints/FeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementHasFeatureConstraints/FeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FeatureConstraints", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementHasFeatureConstraints/FeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a3a82740-9d40-42bc-af4e-6e2358be492a")]
		public virtual FeatureElement FeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureElement of a FeatureConstraint
		/// <summary>
		/// Gets FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FeatureElement GetFeatureElement(FeatureConstraint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FeatureConstraintDomainRoleId) as FeatureElement;
		}
		
		/// <summary>
		/// Sets FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFeatureElement(FeatureConstraint element, FeatureElement newFeatureElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FeatureConstraintDomainRoleId, newFeatureElement);
		}
		#endregion
		#region FeatureConstraint domain role code
		
		/// <summary>
		/// FeatureConstraint domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureConstraintDomainRoleId = new global::System.Guid(0x00102a39, 0xd3ad, 0x404a, 0x8a, 0x26, 0xda, 0x60, 0xcb, 0xae, 0xb4, 0x61);
		
		/// <summary>
		/// DomainRole FeatureConstraint
		/// Description for
		/// Company.SplLanguage.FeatureElementHasFeatureConstraints.FeatureConstraint
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementHasFeatureConstraints/FeatureConstraint.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementHasFeatureConstraints/FeatureConstraint.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FeatureElement", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementHasFeatureConstraints/FeatureConstraint.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("00102a39-d3ad-404a-8a26-da60cbaeb461")]
		public virtual FeatureConstraint FeatureConstraint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureConstraint)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureConstraintDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureConstraintDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureConstraints of a FeatureElement
		/// <summary>
		/// Gets a list of FeatureConstraints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureConstraint> GetFeatureConstraints(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureConstraint>, FeatureConstraint>(element, FeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementHasFeatureConstraints links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementHasFeatureConstraints> GetLinksToFeatureConstraints ( global::Company.SplLanguage.FeatureElement featureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureConstraints>(featureElementInstance, global::Company.SplLanguage.FeatureElementHasFeatureConstraints.FeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureConstraint link accessor
		/// <summary>
		/// Get the FeatureElementHasFeatureConstraints link to a FeatureConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementHasFeatureConstraints GetLinkToFeatureElement (global::Company.SplLanguage.FeatureConstraint featureConstraintInstance)
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementHasFeatureConstraints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureConstraints>(featureConstraintInstance, global::Company.SplLanguage.FeatureElementHasFeatureConstraints.FeatureConstraintDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FeatureConstraint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FeatureElementHasFeatureConstraints instance accessors
		
		/// <summary>
		/// Get any FeatureElementHasFeatureConstraints links between a given FeatureElement and a FeatureConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementHasFeatureConstraints> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureConstraint target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementHasFeatureConstraints> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementHasFeatureConstraints>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementHasFeatureConstraints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureConstraints>(source, global::Company.SplLanguage.FeatureElementHasFeatureConstraints.FeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementHasFeatureConstraints link in links )
			{
				if ( target.Equals(link.FeatureConstraint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementHasFeatureConstraints link between a given FeatureElementand a FeatureConstraint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementHasFeatureConstraints GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureConstraint target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementHasFeatureConstraints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementHasFeatureConstraints>(source, global::Company.SplLanguage.FeatureElementHasFeatureConstraints.FeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementHasFeatureConstraints link in links )
			{
				if ( target.Equals(link.FeatureConstraint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
