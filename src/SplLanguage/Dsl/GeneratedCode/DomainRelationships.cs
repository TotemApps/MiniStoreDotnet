//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureModelHasElements.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureModelHasElements.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("81b4eb75-6e8d-45c2-8a83-5d915131d8ae")]
	public partial class FeatureModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x81b4eb75, 0x6e8d, 0x45c2, 0x8a, 0x83, 0x5d, 0x91, 0x51, 0x31, 0xd8, 0xae);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureModelHasElements link in the same Partition as the given FeatureModel
		/// </summary>
		/// <param name="source">FeatureModel to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureModelHasElements(FeatureModel source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureModelHasElements.FeatureModelDomainRoleId, source), new DslModeling::RoleAssignment(FeatureModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FeatureModel domain role code
		
		/// <summary>
		/// FeatureModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid FeatureModelDomainRoleId = new global::System.Guid(0xcbc98b1d, 0x6bd2, 0x415a, 0x9a, 0xba, 0x0b, 0xad, 0x03, 0x55, 0x5f, 0x41);
		
		/// <summary>
		/// DomainRole FeatureModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureModelHasElements/FeatureModel.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureModelHasElements/FeatureModel.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.SplLanguage.FeatureModelHasElements/FeatureModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cbc98b1d-6bd2-415a-9aba-0bad03555f41")]
		public virtual FeatureModel FeatureModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, FeatureModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FeatureModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FeatureModel of a FeatureElement
		/// <summary>
		/// Gets FeatureModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FeatureModel GetFeatureModel(FeatureElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as FeatureModel;
		}
		
		/// <summary>
		/// Sets FeatureModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFeatureModel(FeatureElement element, FeatureModel newFeatureModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newFeatureModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xec1844d9, 0x3726, 0x4ffb, 0xa0, 0x9b, 0xd6, 0x3b, 0x78, 0x03, 0xf9, 0xf5);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureModelHasElements/Element.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureModelHasElements/Element.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FeatureModel", PropertyDisplayNameKey="Company.SplLanguage.FeatureModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ec1844d9-3726-4ffb-a09b-d63b7803f9f5")]
		public virtual FeatureElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a FeatureModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetElements(FeatureModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, FeatureModelDomainRoleId);
		}
		#endregion
		#region FeatureModel link accessor
		/// <summary>
		/// Get the list of FeatureModelHasElements links to a FeatureModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureModelHasElements> GetLinksToElements ( global::Company.SplLanguage.FeatureModel featureModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(featureModelInstance, global::Company.SplLanguage.FeatureModelHasElements.FeatureModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the FeatureModelHasElements link to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureModelHasElements GetLinkToFeatureModel (global::Company.SplLanguage.FeatureElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(elementInstance, global::Company.SplLanguage.FeatureModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FeatureModelHasElements instance accessors
		
		/// <summary>
		/// Get any FeatureModelHasElements links between a given FeatureModel and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureModelHasElements> GetLinks( global::Company.SplLanguage.FeatureModel source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(source, global::Company.SplLanguage.FeatureModelHasElements.FeatureModelDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureModelHasElements link between a given FeatureModeland a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureModelHasElements GetLink( global::Company.SplLanguage.FeatureModel source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureModelHasElements>(source, global::Company.SplLanguage.FeatureModelHasElements.FeatureModelDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementReferencesTargets.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementReferencesTargets.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("20b619db-33d1-485b-9cac-5c3d29f9c491")]
	public partial class FeatureElementReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x20b619db, 0x33d1, 0x485b, 0x9c, 0xac, 0x5c, 0x3d, 0x29, 0xf9, 0xc4, 0x91);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementReferencesTargets link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureElementReferencesTargets(FeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xc8080e7a, 0x3c3a, 0x42e5, 0x80, 0x2b, 0x4a, 0x0f, 0x37, 0xd1, 0xd9, 0xc5);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.SplLanguage.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementReferencesTargets/Source.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementReferencesTargets/Source.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8080e7a-3c3a-42e5-802b-4a0f37d1d9c5")]
		public virtual FeatureElement Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a FeatureElement
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetSources(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x81e849b8, 0xdbac, 0x47e0, 0x90, 0x46, 0xee, 0x0e, 0x3e, 0xff, 0xd5, 0x89);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.SplLanguage.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementReferencesTargets/Target.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementReferencesTargets/Target.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("81e849b8-dbac-47e0-9046-ee0e3effd589")]
		public virtual FeatureElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a FeatureElement
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetTargets(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of FeatureElementReferencesTargets links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementReferencesTargets> GetLinksToTargets ( global::Company.SplLanguage.FeatureElement sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargets>(sourceInstance, global::Company.SplLanguage.FeatureElementReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of FeatureElementReferencesTargets links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementReferencesTargets> GetLinksToSources ( global::Company.SplLanguage.FeatureElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargets>(targetInstance, global::Company.SplLanguage.FeatureElementReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region FeatureElementReferencesTargets instance accessors
		
		/// <summary>
		/// Get any FeatureElementReferencesTargets links between a given FeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementReferencesTargets> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargets>(source, global::Company.SplLanguage.FeatureElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementReferencesTargets link between a given FeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementReferencesTargets GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargets>(source, global::Company.SplLanguage.FeatureElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SplLanguage
{
	/// <summary>
	/// DomainRelationship FeatureElementReferencesTargetFeatureElements
	/// Description for
	/// Company.SplLanguage.FeatureElementReferencesTargetFeatureElements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SplLanguage.SplLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9d57ccb1-6b0e-4a45-9dc2-9f117a026a92")]
	public partial class FeatureElementReferencesTargetFeatureElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FeatureElementReferencesTargetFeatureElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d57ccb1, 0x6b0e, 0x4a45, 0x9d, 0xc2, 0x9f, 0x11, 0x7a, 0x02, 0x6a, 0x92);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FeatureElementReferencesTargetFeatureElements link in the same Partition as the given FeatureElement
		/// </summary>
		/// <param name="source">FeatureElement to use as the source of the relationship.</param>
		/// <param name="target">FeatureElement to use as the target of the relationship.</param>
		public FeatureElementReferencesTargetFeatureElements(FeatureElement source, FeatureElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FeatureElementReferencesTargetFeatureElements.SourceFeatureElementDomainRoleId, source), new DslModeling::RoleAssignment(FeatureElementReferencesTargetFeatureElements.TargetFeatureElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementReferencesTargetFeatureElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementReferencesTargetFeatureElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FeatureElementReferencesTargetFeatureElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FeatureElementReferencesTargetFeatureElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceFeatureElement domain role code
		
		/// <summary>
		/// SourceFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceFeatureElementDomainRoleId = new global::System.Guid(0xba943ae6, 0x8ff8, 0x4a6d, 0xb9, 0xb6, 0x08, 0x49, 0xc3, 0x75, 0x14, 0x4b);
		
		/// <summary>
		/// DomainRole SourceFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.SourceFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementReferencesTargetFeatureElements/SourceFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementReferencesTargetFeatureElements/SourceFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetFeatureElements", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementReferencesTargetFeatureElements/SourceFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ba943ae6-8ff8-4a6d-b9b6-0849c375144b")]
		public virtual FeatureElement SourceFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceFeatureElements of a FeatureElement
		/// <summary>
		/// Gets a list of SourceFeatureElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetSourceFeatureElements(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, TargetFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetFeatureElement domain role code
		
		/// <summary>
		/// TargetFeatureElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetFeatureElementDomainRoleId = new global::System.Guid(0xda45bd39, 0xcb08, 0x420f, 0x96, 0x37, 0x59, 0x08, 0xe9, 0xb2, 0xf4, 0x9f);
		
		/// <summary>
		/// DomainRole TargetFeatureElement
		/// Description for
		/// Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.TargetFeatureElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SplLanguage.FeatureElementReferencesTargetFeatureElements/TargetFeatureElement.DisplayName", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SplLanguage.FeatureElementReferencesTargetFeatureElements/TargetFeatureElement.Description", typeof(global::Company.SplLanguage.SplLanguageDomainModel), "Company.SplLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceFeatureElements", PropertyDisplayNameKey="Company.SplLanguage.FeatureElementReferencesTargetFeatureElements/TargetFeatureElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("da45bd39-cb08-420f-9637-5908e9b2f49f")]
		public virtual FeatureElement TargetFeatureElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FeatureElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetFeatureElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetFeatureElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetFeatureElements of a FeatureElement
		/// <summary>
		/// Gets a list of TargetFeatureElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FeatureElement> GetTargetFeatureElements(FeatureElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FeatureElement>, FeatureElement>(element, SourceFeatureElementDomainRoleId);
		}
		#endregion
		#region SourceFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementReferencesTargetFeatureElements links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements> GetLinksToTargetFeatureElements ( global::Company.SplLanguage.FeatureElement sourceFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements>(sourceFeatureElementInstance, global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.SourceFeatureElementDomainRoleId);
		}
		#endregion
		#region TargetFeatureElement link accessor
		/// <summary>
		/// Get the list of FeatureElementReferencesTargetFeatureElements links to a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements> GetLinksToSourceFeatureElements ( global::Company.SplLanguage.FeatureElement targetFeatureElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements>(targetFeatureElementInstance, global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.TargetFeatureElementDomainRoleId);
		}
		#endregion
		#region FeatureElementReferencesTargetFeatureElements instance accessors
		
		/// <summary>
		/// Get any FeatureElementReferencesTargetFeatureElements links between a given FeatureElement and a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements> GetLinks( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements> outLinks = new global::System.Collections.Generic.List<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements>();
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements>(source, global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.SourceFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements link in links )
			{
				if ( target.Equals(link.TargetFeatureElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FeatureElementReferencesTargetFeatureElements link between a given FeatureElementand a FeatureElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements GetLink( global::Company.SplLanguage.FeatureElement source, global::Company.SplLanguage.FeatureElement target )
		{
			global::System.Collections.Generic.IList<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements>(source, global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements.SourceFeatureElementDomainRoleId);
			foreach ( global::Company.SplLanguage.FeatureElementReferencesTargetFeatureElements link in links )
			{
				if ( target.Equals(link.TargetFeatureElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
